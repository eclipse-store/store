 
# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Make release

on:
  release:
    types: [created]

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Java for publishing to Maven Central Repository
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: 'maven'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
      - name: Maven change version
        run: mvn versions:set -DnewVersion=${{ github.event.release.tag_name }} --batch-mode
        env:
          DEVELOCITY_ACCESS_KEY: ${{ secrets.DEVELOCITY_API_TOKEN }}
      - name: Maven change serializer version
        run:  mvn versions:set-property -Dproperty=eclipse.serializer.version -DnewVersion=${{ github.event.release.tag_name }}
        env:
          DEVELOCITY_ACCESS_KEY: ${{ secrets.DEVELOCITY_API_TOKEN }}
      - name: Make a release
        run: mvn -Pdeploy -Pproduction --no-transfer-progress --batch-mode clean deploy -Dscan.value.profile="deploy,production"
        env:
          MAVEN_USERNAME: ${{ secrets.ORG_OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.ORG_OSSRH_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.ORG_GPG_PASSPHRASE }}
          MAVEN_GPG_KEY: ${{ secrets.ORG_GPG_PRIVATE_KEY }}
          DEVELOCITY_ACCESS_KEY: ${{ secrets.DEVELOCITY_API_TOKEN }}

      #java 17 build
      - uses: actions/checkout@v3
      - name: Set up Java 17 for publishing to Maven Central Repository
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
      - name: Maven change version
        run: mvn versions:set -DnewVersion=${{ github.event.release.tag_name }} --batch-mode
        env:
          DEVELOCITY_ACCESS_KEY: ${{ secrets.DEVELOCITY_API_TOKEN }}
      - name: Maven change serializer version
        run:  mvn versions:set-property -Dproperty=eclipse.serializer.version -DnewVersion=${{ github.event.release.tag_name }}
        env:
          DEVELOCITY_ACCESS_KEY: ${{ secrets.DEVELOCITY_API_TOKEN }}
      - name: Build with java 17
        run: |
          mvn -P production -pl integrations/spring-boot3 clean install -am -B -Dscan.value.profile="production" -Dscan.value.project="spring-boot3"
          mvn -P production -pl integrations/spring-boot3-console clean install -am -B -Dscan.value.profile="production" -Dscan.value.project="spring-boot3-console"    
          mvn -P production -pl storage/rest/client-app clean install -am -B -Dscan.value.profile="production" -Dscan.value.project="client-app"
          mvn -P production -pl storage/rest/client-app-standalone-assembly clean install -am -B -Dscan.value.profile="production" -Dscan.value.project="client-app-standalone-assembly"
          mvn -P production -pl storage/rest/service-springboot clean install -am -B -Dscan.value.profile="production" -Dscan.value.project="service-springboot"
        env:
          DEVELOCITY_ACCESS_KEY: ${{ secrets.DEVELOCITY_API_TOKEN }}
      - name: Deploy module build with java 17
        run: |
          mvn -Pdeploy -Pproduction -pl integrations/spring-boot3 clean deploy -Dscan.value.profile="deploy,production" -Dscan.value.project="spring-boot3"
          mvn -Pdeploy -Pproduction -pl integrations/spring-boot3-console clean deploy -Dscan.value.profile="deploy,production" -Dscan.value.project="spring-boot3-console"
          mvn -Pdeploy -Pproduction -pl storage/rest/client-app clean deploy -Dscan.value.profile="deploy,production" -Dscan.value.project="client-app"
          mvn -Pdeploy -Pproduction -pl storage/rest/client-app-standalone-assembly clean deploy -Dscan.value.profile="deploy,production" -Dscan.value.project="client-app-standalone-assembly"
          mvn -Pdeploy -Pproduction -pl storage/rest/service-springboot clean deploy -Dscan.value.profile="deploy,production" -Dscan.value.project="service-springboot"
        env:
          MAVEN_USERNAME: ${{ secrets.ORG_OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.ORG_OSSRH_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.ORG_GPG_PASSPHRASE }}
          MAVEN_GPG_KEY: ${{ secrets.ORG_GPG_PRIVATE_KEY }}
          DEVELOCITY_ACCESS_KEY: ${{ secrets.DEVELOCITY_API_TOKEN }}

